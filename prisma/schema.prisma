generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  wallet           String         @unique
  lastSeen         DateTime
  name             String?
  bio              String?
  image            String?
  tokens           Int            @default(0)
  referral         String?        @default("")
  onboarded        Boolean        @default(false)
  visitedX         Boolean        @default(false)
  visitedInstagram Boolean        @default(false)
  visitedTiktok    Boolean        @default(false)
  visitedYoutube   Boolean        @default(false)
  visitedTelegram  Boolean        @default(false)
  lastDailyClaim   DateTime?
  gender           Gender?        @default(MALE)
  lookingFor       LookingFor?    @default(FEMALE)
  messagesSent     Message[]      @relation("MessagesSent")
  messagesReceived Message[]      @relation("MessagesReceived")
  dislikes         UserDislikes[] @relation("UserDislikesFrom")
  dislikedBy       UserDislikes[] @relation("UserDislikesTo")
  likes            UserLikes[]    @relation("UserLikesFrom")
  likedBy          UserLikes[]    @relation("UserLikesTo")
}

model UserLikes {
  fromId String
  toId   String
  from   User   @relation("UserLikesFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to     User   @relation("UserLikesTo", fields: [toId], references: [id], onDelete: Cascade)

  @@id([fromId, toId])
  @@unique([fromId, toId])
}

model UserDislikes {
  fromId String
  toId   String
  from   User   @relation("UserDislikesFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to     User   @relation("UserDislikesTo", fields: [toId], references: [id], onDelete: Cascade)

  @@id([fromId, toId])
  @@unique([fromId, toId])
}

model Message {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  fromUserId String
  toUserId   String
  content    String
  fromUser   User     @relation("MessagesSent", fields: [fromUserId], references: [id])
  toUser     User     @relation("MessagesReceived", fields: [toUserId], references: [id])

  @@index([fromUserId, toUserId])
}

enum Gender {
  MALE
  FEMALE
}

enum LookingFor {
  MALE
  FEMALE
}
